// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: csatPB/csat.proto

package csatPB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CsatClient is the client API for Csat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CsatClient interface {
	GetQuestions(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*QuestionList, error)
	RegisterAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Empty, error)
	GetStatistic(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Statistics, error)
}

type csatClient struct {
	cc grpc.ClientConnInterface
}

func NewCsatClient(cc grpc.ClientConnInterface) CsatClient {
	return &csatClient{cc}
}

func (c *csatClient) GetQuestions(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*QuestionList, error) {
	out := new(QuestionList)
	err := c.cc.Invoke(ctx, "/csat.csat/GetQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csatClient) RegisterAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/csat.csat/RegisterAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *csatClient) GetStatistic(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Statistics, error) {
	out := new(Statistics)
	err := c.cc.Invoke(ctx, "/csat.csat/GetStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CsatServer is the server API for Csat service.
// All implementations must embed UnimplementedCsatServer
// for forward compatibility
type CsatServer interface {
	GetQuestions(context.Context, *UserID) (*QuestionList, error)
	RegisterAnswer(context.Context, *Answer) (*Empty, error)
	GetStatistic(context.Context, *Empty) (*Statistics, error)
	mustEmbedUnimplementedCsatServer()
}

// UnimplementedCsatServer must be embedded to have forward compatible implementations.
type UnimplementedCsatServer struct {
}

func (UnimplementedCsatServer) GetQuestions(context.Context, *UserID) (*QuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedCsatServer) RegisterAnswer(context.Context, *Answer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAnswer not implemented")
}
func (UnimplementedCsatServer) GetStatistic(context.Context, *Empty) (*Statistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}
func (UnimplementedCsatServer) mustEmbedUnimplementedCsatServer() {}

// UnsafeCsatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CsatServer will
// result in compilation errors.
type UnsafeCsatServer interface {
	mustEmbedUnimplementedCsatServer()
}

func RegisterCsatServer(s grpc.ServiceRegistrar, srv CsatServer) {
	s.RegisterService(&Csat_ServiceDesc, srv)
}

func _Csat_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.csat/GetQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServer).GetQuestions(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Csat_RegisterAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServer).RegisterAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.csat/RegisterAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServer).RegisterAnswer(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Csat_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsatServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.csat/GetStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsatServer).GetStatistic(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Csat_ServiceDesc is the grpc.ServiceDesc for Csat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Csat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "csat.csat",
	HandlerType: (*CsatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _Csat_GetQuestions_Handler,
		},
		{
			MethodName: "RegisterAnswer",
			Handler:    _Csat_RegisterAnswer_Handler,
		},
		{
			MethodName: "GetStatistic",
			Handler:    _Csat_GetStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csatPB/csat.proto",
}
