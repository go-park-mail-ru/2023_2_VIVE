// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	searchEnginePB "HnH/services/searchEngineService/searchEnginePB"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeHnHInternalDomain(in *jlexer.Lexer, out *UserUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "password":
			out.Password = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain(out *jwriter.Writer, in UserUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Birthday))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PhoneNumber))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Location))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.NewPassword != "" {
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain1(in *jlexer.Lexer, out *UserNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notifications":
			(out.Notifications).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain1(out *jwriter.Writer, in UserNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Notifications) != 0 {
		const prefix string = ",\"notifications\":"
		first = false
		out.RawString(prefix[1:])
		(in.Notifications).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain1(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain2(in *jlexer.Lexer, out *Statistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statisticsList":
			(out.StatisticsList).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain2(out *jwriter.Writer, in Statistics) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.StatisticsList) != 0 {
		const prefix string = ",\"statisticsList\":"
		first = false
		out.RawString(prefix[1:])
		(in.StatisticsList).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain2(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain3(in *jlexer.Lexer, out *StarsNumSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StarsNumSlice, 0, 4)
			} else {
				*out = StarsNumSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 StarsNum
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain3(out *jwriter.Writer, in StarsNumSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StarsNumSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StarsNumSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StarsNumSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StarsNumSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain3(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain4(in *jlexer.Lexer, out *StarsNum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "starsNum":
			out.StarsNum = int32(in.Int32())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain4(out *jwriter.Writer, in StarsNum) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StarsNum != 0 {
		const prefix string = ",\"starsNum\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.StarsNum))
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StarsNum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StarsNum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StarsNum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StarsNum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain4(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain5(in *jlexer.Lexer, out *QuestionStatisticsSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(QuestionStatisticsSlice, 0, 0)
			} else {
				*out = QuestionStatisticsSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 QuestionStatistics
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain5(out *jwriter.Writer, in QuestionStatisticsSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionStatisticsSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionStatisticsSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionStatisticsSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionStatisticsSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain5(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain6(in *jlexer.Lexer, out *QuestionStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avgStars":
			out.AvgStars = float32(in.Float32())
		case "starsNumList":
			(out.StarsNumList).UnmarshalEasyJSON(in)
		case "questionCommentList":
			(out.QuestionCommentList).UnmarshalEasyJSON(in)
		case "question_text":
			out.QuestionText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain6(out *jwriter.Writer, in QuestionStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AvgStars != 0 {
		const prefix string = ",\"avgStars\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.AvgStars))
	}
	if len(in.StarsNumList) != 0 {
		const prefix string = ",\"starsNumList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.StarsNumList).MarshalEasyJSON(out)
	}
	if len(in.QuestionCommentList) != 0 {
		const prefix string = ",\"questionCommentList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.QuestionCommentList).MarshalEasyJSON(out)
	}
	if in.QuestionText != "" {
		const prefix string = ",\"question_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QuestionText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain6(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain7(in *jlexer.Lexer, out *QuestionSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(QuestionSlice, 0, 1)
			} else {
				*out = QuestionSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Question
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain7(out *jwriter.Writer, in QuestionSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain7(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain8(in *jlexer.Lexer, out *QuestionList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questions":
			(out.Questions).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain8(out *jwriter.Writer, in QuestionList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Questions) != 0 {
		const prefix string = ",\"questions\":"
		first = false
		out.RawString(prefix[1:])
		(in.Questions).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain8(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain9(in *jlexer.Lexer, out *QuestionCommentSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(QuestionCommentSlice, 0, 4)
			} else {
				*out = QuestionCommentSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 QuestionComment
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain9(out *jwriter.Writer, in QuestionCommentSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionCommentSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionCommentSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionCommentSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionCommentSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain9(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain10(in *jlexer.Lexer, out *QuestionComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain10(out *jwriter.Writer, in QuestionComment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain10(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain11(in *jlexer.Lexer, out *Question) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			out.Question = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "question_id":
			out.QuestionId = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain11(out *jwriter.Writer, in Question) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Question != "" {
		const prefix string = ",\"question\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Question))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.QuestionId != 0 {
		const prefix string = ",\"question_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.QuestionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Question) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Question) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Question) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Question) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain11(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain12(in *jlexer.Lexer, out *NotificationMessageSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(NotificationMessageSlice, 0, 1)
			} else {
				*out = NotificationMessageSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 NotificationMessage
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain12(out *jwriter.Writer, in NotificationMessageSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationMessageSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationMessageSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationMessageSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationMessageSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain12(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain13(in *jlexer.Lexer, out *NotificationMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain13(out *jwriter.Writer, in NotificationMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != 0 {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserId))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	if in.CreatedAt != "" {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain13(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain14(in *jlexer.Lexer, out *Language) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "level":
			out.Level = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain14(out *jwriter.Writer, in Language) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Level != "" {
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.String(string(in.Level))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Language) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Language) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Language) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Language) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain14(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain15(in *jlexer.Lexer, out *EmployerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "organization_name":
			out.CompanyName = string(in.String())
		case "vacancies":
			if in.IsNull() {
				in.Skip()
				out.Vacancies = nil
			} else {
				in.Delim('[')
				if out.Vacancies == nil {
					if !in.IsDelim(']') {
						out.Vacancies = make([]ApiVacancy, 0, 0)
					} else {
						out.Vacancies = []ApiVacancy{}
					}
				} else {
					out.Vacancies = (out.Vacancies)[:0]
				}
				for !in.IsDelim(']') {
					var v16 ApiVacancy
					(v16).UnmarshalEasyJSON(in)
					out.Vacancies = append(out.Vacancies, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain15(out *jwriter.Writer, in EmployerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	if len(in.Vacancies) != 0 {
		const prefix string = ",\"vacancies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Vacancies {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmployerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmployerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmployerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmployerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain15(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain16(in *jlexer.Lexer, out *DbUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "role":
			out.Type = Role(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain16(out *jwriter.Writer, in DbUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(*in.Birthday))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(*in.PhoneNumber))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Type != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.AvatarPath != nil {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(*in.AvatarPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DbUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DbUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DbUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DbUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain16(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain17(in *jlexer.Lexer, out *CompanyVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "organization_name":
			out.CompanyName = string(in.String())
		case "vacancy":
			(out.Vacancy).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain17(out *jwriter.Writer, in CompanyVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"vacancy\":"
		out.RawString(prefix)
		(in.Vacancy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompanyVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompanyVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompanyVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompanyVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain17(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain18(in *jlexer.Lexer, out *ApplicantInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "cvs":
			if in.IsNull() {
				in.Skip()
				out.CVs = nil
			} else {
				in.Delim('[')
				if out.CVs == nil {
					if !in.IsDelim(']') {
						out.CVs = make([]ApiCV, 0, 0)
					} else {
						out.CVs = []ApiCV{}
					}
				} else {
					out.CVs = (out.CVs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 ApiCV
					(v19).UnmarshalEasyJSON(in)
					out.CVs = append(out.CVs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain18(out *jwriter.Writer, in ApplicantInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if len(in.CVs) != 0 {
		const prefix string = ",\"cvs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.CVs {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApplicantInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplicantInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApplicantInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplicantInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain18(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain19(in *jlexer.Lexer, out *ApiVacancySlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ApiVacancySlice, 0, 0)
			} else {
				*out = ApiVacancySlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v22 ApiVacancy
			(v22).UnmarshalEasyJSON(in)
			*out = append(*out, v22)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain19(out *jwriter.Writer, in ApiVacancySlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in {
			if v23 > 0 {
				out.RawByte(',')
			}
			(v24).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ApiVacancySlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiVacancySlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiVacancySlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiVacancySlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain19(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain20(in *jlexer.Lexer, out *ApiVacancyCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.Vacancies = nil
			} else {
				in.Delim('[')
				if out.Vacancies == nil {
					if !in.IsDelim(']') {
						out.Vacancies = make([]ApiVacancy, 0, 0)
					} else {
						out.Vacancies = []ApiVacancy{}
					}
				} else {
					out.Vacancies = (out.Vacancies)[:0]
				}
				for !in.IsDelim(']') {
					var v25 ApiVacancy
					(v25).UnmarshalEasyJSON(in)
					out.Vacancies = append(out.Vacancies, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain20(out *jwriter.Writer, in ApiVacancyCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix)
		if in.Vacancies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Vacancies {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiVacancyCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiVacancyCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiVacancyCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiVacancyCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain20(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain21(in *jlexer.Lexer, out *ApiVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_id":
			out.EmployerID = int(in.Int())
		case "name":
			out.VacancyName = string(in.String())
		case "salary_lower_bound":
			if in.IsNull() {
				in.Skip()
				out.SalaryLowerBound = nil
			} else {
				if out.SalaryLowerBound == nil {
					out.SalaryLowerBound = new(int)
				}
				*out.SalaryLowerBound = int(in.Int())
			}
		case "salary_upper_bound":
			if in.IsNull() {
				in.Skip()
				out.SalaryUpperBound = nil
			} else {
				if out.SalaryUpperBound == nil {
					out.SalaryUpperBound = new(int)
				}
				*out.SalaryUpperBound = int(in.Int())
			}
		case "experience":
			out.Experience = ExperienceTime(in.String())
		case "employment":
			out.Employment = EmploymentType(in.String())
		case "education_type":
			out.EducationType = EducationLevel(in.String())
		case "organization_name":
			if in.IsNull() {
				in.Skip()
				out.OrganizationName = nil
			} else {
				if out.OrganizationName == nil {
					out.OrganizationName = new(string)
				}
				*out.OrganizationName = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "description":
			out.Description = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Skills = append(out.Skills, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "favourite":
			out.Favourite = bool(in.Bool())
		case "logo_url":
			out.LogoURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain21(out *jwriter.Writer, in ApiVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"employer_id\":"
		out.RawString(prefix)
		out.Int(int(in.EmployerID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.VacancyName))
	}
	if in.SalaryLowerBound != nil {
		const prefix string = ",\"salary_lower_bound\":"
		out.RawString(prefix)
		out.Int(int(*in.SalaryLowerBound))
	}
	if in.SalaryUpperBound != nil {
		const prefix string = ",\"salary_upper_bound\":"
		out.RawString(prefix)
		out.Int(int(*in.SalaryUpperBound))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	if in.Employment != "" {
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	if in.EducationType != "" {
		const prefix string = ",\"education_type\":"
		out.RawString(prefix)
		out.String(string(in.EducationType))
	}
	if in.OrganizationName != nil {
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(*in.OrganizationName))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Skills) != 0 {
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v29, v30 := range in.Skills {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"favourite\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favourite))
	}
	if in.LogoURL != "" {
		const prefix string = ",\"logo_url\":"
		out.RawString(prefix)
		out.String(string(in.LogoURL))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain21(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain22(in *jlexer.Lexer, out *ApiUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_id":
			if in.IsNull() {
				in.Skip()
				out.EmployerID = nil
			} else {
				if out.EmployerID == nil {
					out.EmployerID = new(int)
				}
				*out.EmployerID = int(in.Int())
			}
		case "applicant_id":
			if in.IsNull() {
				in.Skip()
				out.ApplicantID = nil
			} else {
				if out.ApplicantID == nil {
					out.ApplicantID = new(int)
				}
				*out.ApplicantID = int(in.Int())
			}
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "role":
			out.Type = Role(in.String())
		case "organization_name":
			out.OrganizationName = string(in.String())
		case "organization_description":
			out.OrganizationDescription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain22(out *jwriter.Writer, in ApiUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.EmployerID != nil {
		const prefix string = ",\"employer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.EmployerID))
	}
	if in.ApplicantID != nil {
		const prefix string = ",\"applicant_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.ApplicantID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(*in.Birthday))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(*in.PhoneNumber))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Type != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.OrganizationName != "" {
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	if in.OrganizationDescription != "" {
		const prefix string = ",\"organization_description\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationDescription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain22(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain23(in *jlexer.Lexer, out *ApiResponseSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ApiResponseSlice, 0, 0)
			} else {
				*out = ApiResponseSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v31 ApiResponse
			(v31).UnmarshalEasyJSON(in)
			*out = append(*out, v31)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain23(out *jwriter.Writer, in ApiResponseSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in {
			if v32 > 0 {
				out.RawByte(',')
			}
			(v33).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponseSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponseSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponseSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponseSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain23(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain24(in *jlexer.Lexer, out *ApiResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "vacancy_name":
			out.VacancyName = string(in.String())
		case "vacancy_id":
			out.VacancyID = int(in.Int())
		case "organization_name":
			out.OrganizationName = string(in.String())
		case "employer_id":
			out.EmployerID = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain24(out *jwriter.Writer, in ApiResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"vacancy_name\":"
		out.RawString(prefix)
		out.String(string(in.VacancyName))
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.Int(int(in.VacancyID))
	}
	{
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"employer_id\":"
		out.RawString(prefix)
		out.Int(int(in.EmployerID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain24(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain25(in *jlexer.Lexer, out *ApiMetaVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]*searchEnginePB.Filter, 0, 8)
					} else {
						out.Filters = []*searchEnginePB.Filter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *searchEnginePB.Filter
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(searchEnginePB.Filter)
						}
						easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB(in, v34)
					}
					out.Filters = append(out.Filters, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vacancies":
			(out.Vacancies).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain25(out *jwriter.Writer, in ApiMetaVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Filters) != 0 {
		const prefix string = ",\"filters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v35, v36 := range in.Filters {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB(out, *v36)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vacancies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Vacancies).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiMetaVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiMetaVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiMetaVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiMetaVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain25(l, v)
}
func easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB(in *jlexer.Lexer, out *searchEnginePB.Filter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]*searchEnginePB.FilterValue, 0, 8)
					} else {
						out.Values = []*searchEnginePB.FilterValue{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *searchEnginePB.FilterValue
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(searchEnginePB.FilterValue)
						}
						easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB1(in, v37)
					}
					out.Values = append(out.Values, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB(out *jwriter.Writer, in searchEnginePB.Filter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Values {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB1(out, *v39)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB1(in *jlexer.Lexer, out *searchEnginePB.FilterValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB1(out *jwriter.Writer, in searchEnginePB.FilterValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != "" {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeHnHInternalDomain26(in *jlexer.Lexer, out *ApiMetaCV) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]*searchEnginePB.Filter, 0, 8)
					} else {
						out.Filters = []*searchEnginePB.Filter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *searchEnginePB.Filter
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(searchEnginePB.Filter)
						}
						easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB(in, v40)
					}
					out.Filters = append(out.Filters, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cvs":
			(out.CVs).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain26(out *jwriter.Writer, in ApiMetaCV) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Filters) != 0 {
		const prefix string = ",\"filters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v41, v42 := range in.Filters {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB(out, *v42)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cvs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.CVs).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiMetaCV) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiMetaCV) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiMetaCV) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiMetaCV) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain26(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain27(in *jlexer.Lexer, out *ApiExperience) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "cv_id":
			out.CvID = int(in.Int())
		case "name":
			out.OrganizationName = string(in.String())
		case "job_position":
			out.JobPosition = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "start_date":
			out.StartDate = string(in.String())
		case "end_date":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(string)
				}
				*out.EndDate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain27(out *jwriter.Writer, in ApiExperience) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"cv_id\":"
		out.RawString(prefix)
		out.Int(int(in.CvID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"job_position\":"
		out.RawString(prefix)
		out.String(string(in.JobPosition))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	if in.EndDate != nil {
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.String(string(*in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiExperience) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiExperience) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiExperience) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiExperience) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain27(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain28(in *jlexer.Lexer, out *ApiEducationInstitution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "cv_id":
			out.CvID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "major_field":
			out.MajorField = string(in.String())
		case "graduation_year":
			out.GraduationYear = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain28(out *jwriter.Writer, in ApiEducationInstitution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"cv_id\":"
		out.RawString(prefix)
		out.Int(int(in.CvID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"major_field\":"
		out.RawString(prefix)
		out.String(string(in.MajorField))
	}
	{
		const prefix string = ",\"graduation_year\":"
		out.RawString(prefix)
		out.String(string(in.GraduationYear))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiEducationInstitution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiEducationInstitution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiEducationInstitution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiEducationInstitution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain28(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain29(in *jlexer.Lexer, out *ApiCVSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ApiCVSlice, 0, 0)
			} else {
				*out = ApiCVSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v43 ApiCV
			(v43).UnmarshalEasyJSON(in)
			*out = append(*out, v43)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain29(out *jwriter.Writer, in ApiCVSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v44, v45 := range in {
			if v44 > 0 {
				out.RawByte(',')
			}
			(v45).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCVSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCVSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCVSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCVSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain29(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain30(in *jlexer.Lexer, out *ApiCVCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.CVs = nil
			} else {
				in.Delim('[')
				if out.CVs == nil {
					if !in.IsDelim(']') {
						out.CVs = make([]ApiCV, 0, 0)
					} else {
						out.CVs = []ApiCV{}
					}
				} else {
					out.CVs = (out.CVs)[:0]
				}
				for !in.IsDelim(']') {
					var v46 ApiCV
					(v46).UnmarshalEasyJSON(in)
					out.CVs = append(out.CVs, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain30(out *jwriter.Writer, in ApiCVCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix)
		if in.CVs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.CVs {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCVCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCVCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCVCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCVCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain30(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain31(in *jlexer.Lexer, out *ApiCV) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "last_name":
			out.LastName = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "middle_name":
			if in.IsNull() {
				in.Skip()
				out.MiddleName = nil
			} else {
				if out.MiddleName == nil {
					out.MiddleName = new(string)
				}
				*out.MiddleName = string(in.String())
			}
		case "gender":
			out.Gender = Gender(in.String())
		case "city":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "profession_name":
			out.ProfessionName = string(in.String())
		case "education_level":
			out.EducationLevel = EducationLevel(in.String())
		case "status":
			out.Status = Status(in.String())
		case "institutions":
			if in.IsNull() {
				in.Skip()
				out.EducationInstitutions = nil
			} else {
				in.Delim('[')
				if out.EducationInstitutions == nil {
					if !in.IsDelim(']') {
						out.EducationInstitutions = make([]*ApiEducationInstitution, 0, 8)
					} else {
						out.EducationInstitutions = []*ApiEducationInstitution{}
					}
				} else {
					out.EducationInstitutions = (out.EducationInstitutions)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *ApiEducationInstitution
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(ApiEducationInstitution)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.EducationInstitutions = append(out.EducationInstitutions, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companies":
			if in.IsNull() {
				in.Skip()
				out.Experience = nil
			} else {
				in.Delim('[')
				if out.Experience == nil {
					if !in.IsDelim(']') {
						out.Experience = make([]*ApiExperience, 0, 8)
					} else {
						out.Experience = []*ApiExperience{}
					}
				} else {
					out.Experience = (out.Experience)[:0]
				}
				for !in.IsDelim(']') {
					var v50 *ApiExperience
					if in.IsNull() {
						in.Skip()
						v50 = nil
					} else {
						if v50 == nil {
							v50 = new(ApiExperience)
						}
						(*v50).UnmarshalEasyJSON(in)
					}
					out.Experience = append(out.Experience, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.Skills = append(out.Skills, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain31(out *jwriter.Writer, in ApiCV) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.MiddleName != nil {
		const prefix string = ",\"middle_name\":"
		out.RawString(prefix)
		out.String(string(*in.MiddleName))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	if in.Location != nil {
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(*in.Birthday))
	}
	{
		const prefix string = ",\"profession_name\":"
		out.RawString(prefix)
		out.String(string(in.ProfessionName))
	}
	{
		const prefix string = ",\"education_level\":"
		out.RawString(prefix)
		out.String(string(in.EducationLevel))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"institutions\":"
		out.RawString(prefix)
		if in.EducationInstitutions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.EducationInstitutions {
				if v52 > 0 {
					out.RawByte(',')
				}
				if v53 == nil {
					out.RawString("null")
				} else {
					(*v53).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"companies\":"
		out.RawString(prefix)
		if in.Experience == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.Experience {
				if v54 > 0 {
					out.RawByte(',')
				}
				if v55 == nil {
					out.RawString("null")
				} else {
					(*v55).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Skills {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCV) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCV) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCV) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCV) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain31(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain32(in *jlexer.Lexer, out *ApiApplicantSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ApiApplicantSlice, 0, 1)
			} else {
				*out = ApiApplicantSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v58 ApiApplicant
			(v58).UnmarshalEasyJSON(in)
			*out = append(*out, v58)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain32(out *jwriter.Writer, in ApiApplicantSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v59, v60 := range in {
			if v59 > 0 {
				out.RawByte(',')
			}
			(v60).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ApiApplicantSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiApplicantSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiApplicantSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiApplicantSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain32(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain33(in *jlexer.Lexer, out *ApiApplicant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cv_id":
			out.CVid = int(in.Int())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.Skills = append(out.Skills, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain33(out *jwriter.Writer, in ApiApplicant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cv_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CVid))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if len(in.Skills) != 0 {
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v62, v63 := range in.Skills {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiApplicant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiApplicant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiApplicant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiApplicant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain33(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain34(in *jlexer.Lexer, out *Answer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "starts":
			out.Starts = int32(in.Int32())
		case "comment":
			out.Comment = string(in.String())
		case "question_id":
			out.QuestionId = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain34(out *jwriter.Writer, in Answer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Starts != 0 {
		const prefix string = ",\"starts\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Starts))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Comment))
	}
	if in.QuestionId != 0 {
		const prefix string = ",\"question_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.QuestionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Answer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Answer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Answer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Answer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain34(l, v)
}
