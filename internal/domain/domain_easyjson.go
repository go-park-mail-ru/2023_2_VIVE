// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	searchEnginePB "HnH/services/searchEngineService/searchEnginePB"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeHnHInternalDomain(in *jlexer.Lexer, out *UserUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "password":
			out.Password = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain(out *jwriter.Writer, in UserUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Birthday))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PhoneNumber))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Location))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.NewPassword != "" {
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain1(in *jlexer.Lexer, out *Language) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "level":
			out.Level = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain1(out *jwriter.Writer, in Language) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Level != "" {
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.String(string(in.Level))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Language) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Language) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Language) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Language) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain1(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain2(in *jlexer.Lexer, out *EmployerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "organization_name":
			out.CompanyName = string(in.String())
		case "vacancies":
			if in.IsNull() {
				in.Skip()
				out.Vacancies = nil
			} else {
				in.Delim('[')
				if out.Vacancies == nil {
					if !in.IsDelim(']') {
						out.Vacancies = make([]ApiVacancy, 0, 0)
					} else {
						out.Vacancies = []ApiVacancy{}
					}
				} else {
					out.Vacancies = (out.Vacancies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ApiVacancy
					(v1).UnmarshalEasyJSON(in)
					out.Vacancies = append(out.Vacancies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain2(out *jwriter.Writer, in EmployerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	if len(in.Vacancies) != 0 {
		const prefix string = ",\"vacancies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Vacancies {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmployerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmployerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmployerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmployerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain2(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain3(in *jlexer.Lexer, out *DbUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "role":
			out.Type = Role(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain3(out *jwriter.Writer, in DbUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(*in.Birthday))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(*in.PhoneNumber))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Type != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.AvatarPath != nil {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(*in.AvatarPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DbUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DbUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DbUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DbUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain3(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain4(in *jlexer.Lexer, out *CompanyVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "organization_name":
			out.CompanyName = string(in.String())
		case "vacancy":
			(out.Vacancy).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain4(out *jwriter.Writer, in CompanyVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"vacancy\":"
		out.RawString(prefix)
		(in.Vacancy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompanyVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompanyVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompanyVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompanyVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain4(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain5(in *jlexer.Lexer, out *ApplicantInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "cvs":
			if in.IsNull() {
				in.Skip()
				out.CVs = nil
			} else {
				in.Delim('[')
				if out.CVs == nil {
					if !in.IsDelim(']') {
						out.CVs = make([]ApiCV, 0, 0)
					} else {
						out.CVs = []ApiCV{}
					}
				} else {
					out.CVs = (out.CVs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ApiCV
					(v4).UnmarshalEasyJSON(in)
					out.CVs = append(out.CVs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain5(out *jwriter.Writer, in ApplicantInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if len(in.CVs) != 0 {
		const prefix string = ",\"cvs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.CVs {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApplicantInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplicantInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApplicantInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplicantInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain5(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain6(in *jlexer.Lexer, out *ApiVacancyCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.Vacancies = nil
			} else {
				in.Delim('[')
				if out.Vacancies == nil {
					if !in.IsDelim(']') {
						out.Vacancies = make([]ApiVacancy, 0, 0)
					} else {
						out.Vacancies = []ApiVacancy{}
					}
				} else {
					out.Vacancies = (out.Vacancies)[:0]
				}
				for !in.IsDelim(']') {
					var v7 ApiVacancy
					(v7).UnmarshalEasyJSON(in)
					out.Vacancies = append(out.Vacancies, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain6(out *jwriter.Writer, in ApiVacancyCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix)
		if in.Vacancies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Vacancies {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiVacancyCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiVacancyCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiVacancyCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiVacancyCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain6(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain7(in *jlexer.Lexer, out *ApiVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_id":
			out.EmployerID = int(in.Int())
		case "name":
			out.VacancyName = string(in.String())
		case "salary_lower_bound":
			if in.IsNull() {
				in.Skip()
				out.SalaryLowerBound = nil
			} else {
				if out.SalaryLowerBound == nil {
					out.SalaryLowerBound = new(int)
				}
				*out.SalaryLowerBound = int(in.Int())
			}
		case "salary_upper_bound":
			if in.IsNull() {
				in.Skip()
				out.SalaryUpperBound = nil
			} else {
				if out.SalaryUpperBound == nil {
					out.SalaryUpperBound = new(int)
				}
				*out.SalaryUpperBound = int(in.Int())
			}
		case "experience":
			out.Experience = ExperienceTime(in.String())
		case "employment":
			out.Employment = EmploymentType(in.String())
		case "education_type":
			out.EducationType = EducationLevel(in.String())
		case "organization_name":
			if in.IsNull() {
				in.Skip()
				out.OrganizationName = nil
			} else {
				if out.OrganizationName == nil {
					out.OrganizationName = new(string)
				}
				*out.OrganizationName = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "description":
			out.Description = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Skills = append(out.Skills, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "favourite":
			out.Favourite = bool(in.Bool())
		case "logo_url":
			out.LogoURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain7(out *jwriter.Writer, in ApiVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"employer_id\":"
		out.RawString(prefix)
		out.Int(int(in.EmployerID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.VacancyName))
	}
	if in.SalaryLowerBound != nil {
		const prefix string = ",\"salary_lower_bound\":"
		out.RawString(prefix)
		out.Int(int(*in.SalaryLowerBound))
	}
	if in.SalaryUpperBound != nil {
		const prefix string = ",\"salary_upper_bound\":"
		out.RawString(prefix)
		out.Int(int(*in.SalaryUpperBound))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	if in.Employment != "" {
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	if in.EducationType != "" {
		const prefix string = ",\"education_type\":"
		out.RawString(prefix)
		out.String(string(in.EducationType))
	}
	if in.OrganizationName != nil {
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(*in.OrganizationName))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Skills) != 0 {
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Skills {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"favourite\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favourite))
	}
	if in.LogoURL != "" {
		const prefix string = ",\"logo_url\":"
		out.RawString(prefix)
		out.String(string(in.LogoURL))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain7(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain8(in *jlexer.Lexer, out *ApiUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_id":
			if in.IsNull() {
				in.Skip()
				out.EmployerID = nil
			} else {
				if out.EmployerID == nil {
					out.EmployerID = new(int)
				}
				*out.EmployerID = int(in.Int())
			}
		case "applicant_id":
			if in.IsNull() {
				in.Skip()
				out.ApplicantID = nil
			} else {
				if out.ApplicantID == nil {
					out.ApplicantID = new(int)
				}
				*out.ApplicantID = int(in.Int())
			}
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "role":
			out.Type = Role(in.String())
		case "organization_name":
			out.OrganizationName = string(in.String())
		case "organization_description":
			out.OrganizationDescription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain8(out *jwriter.Writer, in ApiUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.EmployerID != nil {
		const prefix string = ",\"employer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.EmployerID))
	}
	if in.ApplicantID != nil {
		const prefix string = ",\"applicant_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.ApplicantID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(*in.Birthday))
	}
	if in.PhoneNumber != nil {
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(*in.PhoneNumber))
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Type != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.OrganizationName != "" {
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	if in.OrganizationDescription != "" {
		const prefix string = ",\"organization_description\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationDescription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain8(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain9(in *jlexer.Lexer, out *ApiResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "vacancy_name":
			out.VacancyName = string(in.String())
		case "vacancy_id":
			out.VacancyID = int(in.Int())
		case "organization_name":
			out.OrganizationName = string(in.String())
		case "employer_id":
			out.EmployerID = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain9(out *jwriter.Writer, in ApiResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"vacancy_name\":"
		out.RawString(prefix)
		out.String(string(in.VacancyName))
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.Int(int(in.VacancyID))
	}
	{
		const prefix string = ",\"organization_name\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"employer_id\":"
		out.RawString(prefix)
		out.Int(int(in.EmployerID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain9(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain10(in *jlexer.Lexer, out *ApiMetaVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]*searchEnginePB.Filter, 0, 8)
					} else {
						out.Filters = []*searchEnginePB.Filter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *searchEnginePB.Filter
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(searchEnginePB.Filter)
						}
						easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB(in, v13)
					}
					out.Filters = append(out.Filters, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vacancies":
			(out.Vacancies).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain10(out *jwriter.Writer, in ApiMetaVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Filters) != 0 {
		const prefix string = ",\"filters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.Filters {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB(out, *v15)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vacancies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Vacancies).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiMetaVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiMetaVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiMetaVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiMetaVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain10(l, v)
}
func easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB(in *jlexer.Lexer, out *searchEnginePB.Filter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]*searchEnginePB.FilterValue, 0, 8)
					} else {
						out.Values = []*searchEnginePB.FilterValue{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *searchEnginePB.FilterValue
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(searchEnginePB.FilterValue)
						}
						easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB1(in, v16)
					}
					out.Values = append(out.Values, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB(out *jwriter.Writer, in searchEnginePB.Filter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Values {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB1(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB1(in *jlexer.Lexer, out *searchEnginePB.FilterValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB1(out *jwriter.Writer, in searchEnginePB.FilterValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != "" {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeHnHInternalDomain11(in *jlexer.Lexer, out *ApiMetaCV) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]*searchEnginePB.Filter, 0, 8)
					} else {
						out.Filters = []*searchEnginePB.Filter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *searchEnginePB.Filter
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(searchEnginePB.Filter)
						}
						easyjson3e1fa5ecDecodeHnHServicesSearchEngineServiceSearchEnginePB(in, v19)
					}
					out.Filters = append(out.Filters, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cvs":
			(out.CVs).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain11(out *jwriter.Writer, in ApiMetaCV) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Filters) != 0 {
		const prefix string = ",\"filters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v20, v21 := range in.Filters {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					easyjson3e1fa5ecEncodeHnHServicesSearchEngineServiceSearchEnginePB(out, *v21)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cvs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.CVs).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiMetaCV) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiMetaCV) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiMetaCV) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiMetaCV) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain11(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain12(in *jlexer.Lexer, out *ApiExperience) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "cv_id":
			out.CvID = int(in.Int())
		case "name":
			out.OrganizationName = string(in.String())
		case "job_position":
			out.JobPosition = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "start_date":
			out.StartDate = string(in.String())
		case "end_date":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(string)
				}
				*out.EndDate = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain12(out *jwriter.Writer, in ApiExperience) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"cv_id\":"
		out.RawString(prefix)
		out.Int(int(in.CvID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"job_position\":"
		out.RawString(prefix)
		out.String(string(in.JobPosition))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	if in.EndDate != nil {
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.String(string(*in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiExperience) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiExperience) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiExperience) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiExperience) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain12(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain13(in *jlexer.Lexer, out *ApiEducationInstitution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "cv_id":
			out.CvID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "major_field":
			out.MajorField = string(in.String())
		case "graduation_year":
			out.GraduationYear = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain13(out *jwriter.Writer, in ApiEducationInstitution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"cv_id\":"
		out.RawString(prefix)
		out.Int(int(in.CvID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"major_field\":"
		out.RawString(prefix)
		out.String(string(in.MajorField))
	}
	{
		const prefix string = ",\"graduation_year\":"
		out.RawString(prefix)
		out.String(string(in.GraduationYear))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiEducationInstitution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiEducationInstitution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiEducationInstitution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiEducationInstitution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain13(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain14(in *jlexer.Lexer, out *ApiCVCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "list":
			if in.IsNull() {
				in.Skip()
				out.CVs = nil
			} else {
				in.Delim('[')
				if out.CVs == nil {
					if !in.IsDelim(']') {
						out.CVs = make([]ApiCV, 0, 0)
					} else {
						out.CVs = []ApiCV{}
					}
				} else {
					out.CVs = (out.CVs)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ApiCV
					(v22).UnmarshalEasyJSON(in)
					out.CVs = append(out.CVs, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain14(out *jwriter.Writer, in ApiCVCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix)
		if in.CVs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.CVs {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCVCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCVCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCVCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCVCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain14(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain15(in *jlexer.Lexer, out *ApiCV) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "last_name":
			out.LastName = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "middle_name":
			if in.IsNull() {
				in.Skip()
				out.MiddleName = nil
			} else {
				if out.MiddleName == nil {
					out.MiddleName = new(string)
				}
				*out.MiddleName = string(in.String())
			}
		case "gender":
			out.Gender = Gender(in.String())
		case "city":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(string)
				}
				*out.Location = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "profession_name":
			out.ProfessionName = string(in.String())
		case "education_level":
			out.EducationLevel = EducationLevel(in.String())
		case "status":
			out.Status = Status(in.String())
		case "institutions":
			if in.IsNull() {
				in.Skip()
				out.EducationInstitutions = nil
			} else {
				in.Delim('[')
				if out.EducationInstitutions == nil {
					if !in.IsDelim(']') {
						out.EducationInstitutions = make([]*ApiEducationInstitution, 0, 8)
					} else {
						out.EducationInstitutions = []*ApiEducationInstitution{}
					}
				} else {
					out.EducationInstitutions = (out.EducationInstitutions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *ApiEducationInstitution
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(ApiEducationInstitution)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.EducationInstitutions = append(out.EducationInstitutions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companies":
			if in.IsNull() {
				in.Skip()
				out.Experience = nil
			} else {
				in.Delim('[')
				if out.Experience == nil {
					if !in.IsDelim(']') {
						out.Experience = make([]*ApiExperience, 0, 8)
					} else {
						out.Experience = []*ApiExperience{}
					}
				} else {
					out.Experience = (out.Experience)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *ApiExperience
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(ApiExperience)
						}
						(*v26).UnmarshalEasyJSON(in)
					}
					out.Experience = append(out.Experience, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.Skills = append(out.Skills, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain15(out *jwriter.Writer, in ApiCV) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.MiddleName != nil {
		const prefix string = ",\"middle_name\":"
		out.RawString(prefix)
		out.String(string(*in.MiddleName))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	if in.Location != nil {
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(*in.Location))
	}
	if in.Birthday != nil {
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(*in.Birthday))
	}
	{
		const prefix string = ",\"profession_name\":"
		out.RawString(prefix)
		out.String(string(in.ProfessionName))
	}
	{
		const prefix string = ",\"education_level\":"
		out.RawString(prefix)
		out.String(string(in.EducationLevel))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"institutions\":"
		out.RawString(prefix)
		if in.EducationInstitutions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.EducationInstitutions {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					(*v29).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"companies\":"
		out.RawString(prefix)
		if in.Experience == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Experience {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					(*v31).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Skills {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCV) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCV) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCV) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCV) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain15(l, v)
}
func easyjson3e1fa5ecDecodeHnHInternalDomain16(in *jlexer.Lexer, out *ApiApplicant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cv_id":
			out.CVid = int(in.Int())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Skills = append(out.Skills, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeHnHInternalDomain16(out *jwriter.Writer, in ApiApplicant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cv_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CVid))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	if len(in.Skills) != 0 {
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v35, v36 := range in.Skills {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiApplicant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeHnHInternalDomain16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiApplicant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeHnHInternalDomain16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiApplicant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeHnHInternalDomain16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiApplicant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeHnHInternalDomain16(l, v)
}
