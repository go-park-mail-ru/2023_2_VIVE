// Code generated by MockGen. DO NOT EDIT.
// Source: psql/psql_cv.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	domain "HnH/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICVRepository is a mock of ICVRepository interface.
type MockICVRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICVRepositoryMockRecorder
}

// MockICVRepositoryMockRecorder is the mock recorder for MockICVRepository.
type MockICVRepositoryMockRecorder struct {
	mock *MockICVRepository
}

// NewMockICVRepository creates a new mock instance.
func NewMockICVRepository(ctrl *gomock.Controller) *MockICVRepository {
	mock := &MockICVRepository{ctrl: ctrl}
	mock.recorder = &MockICVRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICVRepository) EXPECT() *MockICVRepositoryMockRecorder {
	return m.recorder
}

// AddCV mocks base method.
func (m *MockICVRepository) AddCV(ctx context.Context, userID int, cv *domain.DbCV, experiences []domain.DbExperience, insitutions []domain.DbEducationInstitution) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCV", ctx, userID, cv, experiences, insitutions)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCV indicates an expected call of AddCV.
func (mr *MockICVRepositoryMockRecorder) AddCV(ctx, userID, cv, experiences, insitutions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCV", reflect.TypeOf((*MockICVRepository)(nil).AddCV), ctx, userID, cv, experiences, insitutions)
}

// DeleteOneOfUsersCV mocks base method.
func (m *MockICVRepository) DeleteOneOfUsersCV(ctx context.Context, userID, cvID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneOfUsersCV", ctx, userID, cvID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneOfUsersCV indicates an expected call of DeleteOneOfUsersCV.
func (mr *MockICVRepositoryMockRecorder) DeleteOneOfUsersCV(ctx, userID, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneOfUsersCV", reflect.TypeOf((*MockICVRepository)(nil).DeleteOneOfUsersCV), ctx, userID, cvID)
}

// GetApplicantInfo mocks base method.
func (m *MockICVRepository) GetApplicantInfo(ctx context.Context, applicantID int) (string, string, []domain.DbCV, []domain.DbExperience, []domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicantInfo", ctx, applicantID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]domain.DbCV)
	ret3, _ := ret[3].([]domain.DbExperience)
	ret4, _ := ret[4].([]domain.DbEducationInstitution)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetApplicantInfo indicates an expected call of GetApplicantInfo.
func (mr *MockICVRepositoryMockRecorder) GetApplicantInfo(ctx, applicantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicantInfo", reflect.TypeOf((*MockICVRepository)(nil).GetApplicantInfo), ctx, applicantID)
}

// GetCVById mocks base method.
func (m *MockICVRepository) GetCVById(ctx context.Context, cvID int) (*domain.DbCV, []domain.DbExperience, []domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVById", ctx, cvID)
	ret0, _ := ret[0].(*domain.DbCV)
	ret1, _ := ret[1].([]domain.DbExperience)
	ret2, _ := ret[2].([]domain.DbEducationInstitution)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCVById indicates an expected call of GetCVById.
func (mr *MockICVRepositoryMockRecorder) GetCVById(ctx, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVById", reflect.TypeOf((*MockICVRepository)(nil).GetCVById), ctx, cvID)
}

// GetCVsByIds mocks base method.
func (m *MockICVRepository) GetCVsByIds(ctx context.Context, idList []int) ([]domain.DbCV, []domain.DbExperience, []domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVsByIds", ctx, idList)
	ret0, _ := ret[0].([]domain.DbCV)
	ret1, _ := ret[1].([]domain.DbExperience)
	ret2, _ := ret[2].([]domain.DbEducationInstitution)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCVsByIds indicates an expected call of GetCVsByIds.
func (mr *MockICVRepositoryMockRecorder) GetCVsByIds(ctx, idList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVsByIds", reflect.TypeOf((*MockICVRepository)(nil).GetCVsByIds), ctx, idList)
}

// GetCVsByUserId mocks base method.
func (m *MockICVRepository) GetCVsByUserId(ctx context.Context, userID int) ([]domain.DbCV, []domain.DbExperience, []domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVsByUserId", ctx, userID)
	ret0, _ := ret[0].([]domain.DbCV)
	ret1, _ := ret[1].([]domain.DbExperience)
	ret2, _ := ret[2].([]domain.DbEducationInstitution)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCVsByUserId indicates an expected call of GetCVsByUserId.
func (mr *MockICVRepositoryMockRecorder) GetCVsByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVsByUserId", reflect.TypeOf((*MockICVRepository)(nil).GetCVsByUserId), ctx, userID)
}

// GetOneOfUsersCV mocks base method.
func (m *MockICVRepository) GetOneOfUsersCV(ctx context.Context, userID, cvID int) (*domain.DbCV, []domain.DbExperience, []domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOfUsersCV", ctx, userID, cvID)
	ret0, _ := ret[0].(*domain.DbCV)
	ret1, _ := ret[1].([]domain.DbExperience)
	ret2, _ := ret[2].([]domain.DbEducationInstitution)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOneOfUsersCV indicates an expected call of GetOneOfUsersCV.
func (mr *MockICVRepositoryMockRecorder) GetOneOfUsersCV(ctx, userID, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOfUsersCV", reflect.TypeOf((*MockICVRepository)(nil).GetOneOfUsersCV), ctx, userID, cvID)
}

// UpdateOneOfUsersCV mocks base method.
func (m *MockICVRepository) UpdateOneOfUsersCV(ctx context.Context, userID, cvID int, cv *domain.DbCV, experiencesIDsToDelete []int, experiencesToUpdate, experiencesToInsert []domain.DbExperience, insitutionsIDsToDelete []int, insitutionsToUpdate, insitutionsToInsert []domain.DbEducationInstitution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneOfUsersCV", ctx, userID, cvID, cv, experiencesIDsToDelete, experiencesToUpdate, experiencesToInsert, insitutionsIDsToDelete, insitutionsToUpdate, insitutionsToInsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneOfUsersCV indicates an expected call of UpdateOneOfUsersCV.
func (mr *MockICVRepositoryMockRecorder) UpdateOneOfUsersCV(ctx, userID, cvID, cv, experiencesIDsToDelete, experiencesToUpdate, experiencesToInsert, insitutionsIDsToDelete, insitutionsToUpdate, insitutionsToInsert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneOfUsersCV", reflect.TypeOf((*MockICVRepository)(nil).UpdateOneOfUsersCV), ctx, userID, cvID, cv, experiencesIDsToDelete, experiencesToUpdate, experiencesToInsert, insitutionsIDsToDelete, insitutionsToUpdate, insitutionsToInsert)
}
