// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/search_engine.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	searchEnginePB "HnH/services/searchEngineService/searchEnginePB"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISearchEngineRepository is a mock of ISearchEngineRepository interface.
type MockISearchEngineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISearchEngineRepositoryMockRecorder
}

// MockISearchEngineRepositoryMockRecorder is the mock recorder for MockISearchEngineRepository.
type MockISearchEngineRepositoryMockRecorder struct {
	mock *MockISearchEngineRepository
}

// NewMockISearchEngineRepository creates a new mock instance.
func NewMockISearchEngineRepository(ctrl *gomock.Controller) *MockISearchEngineRepository {
	mock := &MockISearchEngineRepository{ctrl: ctrl}
	mock.recorder = &MockISearchEngineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISearchEngineRepository) EXPECT() *MockISearchEngineRepositoryMockRecorder {
	return m.recorder
}

// SearchCVsIDs mocks base method.
func (m *MockISearchEngineRepository) SearchCVsIDs(ctx context.Context, options *searchEnginePB.SearchOptions) (*searchEnginePB.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCVsIDs", ctx, options)
	ret0, _ := ret[0].(*searchEnginePB.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCVsIDs indicates an expected call of SearchCVsIDs.
func (mr *MockISearchEngineRepositoryMockRecorder) SearchCVsIDs(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCVsIDs", reflect.TypeOf((*MockISearchEngineRepository)(nil).SearchCVsIDs), ctx, options)
}

// SearchVacancyIDs mocks base method.
func (m *MockISearchEngineRepository) SearchVacancyIDs(ctx context.Context, options *searchEnginePB.SearchOptions) (*searchEnginePB.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVacancyIDs", ctx, options)
	ret0, _ := ret[0].(*searchEnginePB.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVacancyIDs indicates an expected call of SearchVacancyIDs.
func (mr *MockISearchEngineRepositoryMockRecorder) SearchVacancyIDs(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVacancyIDs", reflect.TypeOf((*MockISearchEngineRepository)(nil).SearchVacancyIDs), ctx, options)
}
