// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/notifications.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	notificationsPB "HnH/services/notifications/api/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockINotificationRepository is a mock of INotificationRepository interface.
type MockINotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationRepositoryMockRecorder
}

// MockINotificationRepositoryMockRecorder is the mock recorder for MockINotificationRepository.
type MockINotificationRepositoryMockRecorder struct {
	mock *MockINotificationRepository
}

// NewMockINotificationRepository creates a new mock instance.
func NewMockINotificationRepository(ctrl *gomock.Controller) *MockINotificationRepository {
	mock := &MockINotificationRepository{ctrl: ctrl}
	mock.recorder = &MockINotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationRepository) EXPECT() *MockINotificationRepositoryMockRecorder {
	return m.recorder
}

// DeleteUserNotifications mocks base method.
func (m *MockINotificationRepository) DeleteUserNotifications(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserNotifications", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserNotifications indicates an expected call of DeleteUserNotifications.
func (mr *MockINotificationRepositoryMockRecorder) DeleteUserNotifications(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserNotifications", reflect.TypeOf((*MockINotificationRepository)(nil).DeleteUserNotifications), ctx, userID)
}

// GetUserNotifications mocks base method.
func (m *MockINotificationRepository) GetUserNotifications(ctx context.Context, userID int64) (*notificationsPB.UserNotifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotifications", ctx, userID)
	ret0, _ := ret[0].(*notificationsPB.UserNotifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotifications indicates an expected call of GetUserNotifications.
func (mr *MockINotificationRepositoryMockRecorder) GetUserNotifications(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotifications", reflect.TypeOf((*MockINotificationRepository)(nil).GetUserNotifications), ctx, userID)
}

// SendMessage mocks base method.
func (m *MockINotificationRepository) SendMessage(ctx context.Context, message *notificationsPB.NotificationMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockINotificationRepositoryMockRecorder) SendMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockINotificationRepository)(nil).SendMessage), ctx, message)
}
