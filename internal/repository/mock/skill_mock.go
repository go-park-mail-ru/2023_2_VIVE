// Code generated by MockGen. DO NOT EDIT.
// Source: psql/psql_skill.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISkillRepository is a mock of ISkillRepository interface.
type MockISkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISkillRepositoryMockRecorder
}

// MockISkillRepositoryMockRecorder is the mock recorder for MockISkillRepository.
type MockISkillRepositoryMockRecorder struct {
	mock *MockISkillRepository
}

// NewMockISkillRepository creates a new mock instance.
func NewMockISkillRepository(ctrl *gomock.Controller) *MockISkillRepository {
	mock := &MockISkillRepository{ctrl: ctrl}
	mock.recorder = &MockISkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISkillRepository) EXPECT() *MockISkillRepositoryMockRecorder {
	return m.recorder
}

// AddSkillsByCvID mocks base method.
func (m *MockISkillRepository) AddSkillsByCvID(ctx context.Context, cvsID int, skills []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkillsByCvID", ctx, cvsID, skills)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSkillsByCvID indicates an expected call of AddSkillsByCvID.
func (mr *MockISkillRepositoryMockRecorder) AddSkillsByCvID(ctx, cvsID, skills interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkillsByCvID", reflect.TypeOf((*MockISkillRepository)(nil).AddSkillsByCvID), ctx, cvsID, skills)
}

// AddSkillsByVacID mocks base method.
func (m *MockISkillRepository) AddSkillsByVacID(ctx context.Context, vacID int, skills []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkillsByVacID", ctx, vacID, skills)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSkillsByVacID indicates an expected call of AddSkillsByVacID.
func (mr *MockISkillRepositoryMockRecorder) AddSkillsByVacID(ctx, vacID, skills interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkillsByVacID", reflect.TypeOf((*MockISkillRepository)(nil).AddSkillsByVacID), ctx, vacID, skills)
}

// DeleteSkillsByCvID mocks base method.
func (m *MockISkillRepository) DeleteSkillsByCvID(ctx context.Context, cvID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkillsByCvID", ctx, cvID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkillsByCvID indicates an expected call of DeleteSkillsByCvID.
func (mr *MockISkillRepositoryMockRecorder) DeleteSkillsByCvID(ctx, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkillsByCvID", reflect.TypeOf((*MockISkillRepository)(nil).DeleteSkillsByCvID), ctx, cvID)
}

// GetSkillsByCvID mocks base method.
func (m *MockISkillRepository) GetSkillsByCvID(ctx context.Context, cvID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillsByCvID", ctx, cvID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillsByCvID indicates an expected call of GetSkillsByCvID.
func (mr *MockISkillRepositoryMockRecorder) GetSkillsByCvID(ctx, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillsByCvID", reflect.TypeOf((*MockISkillRepository)(nil).GetSkillsByCvID), ctx, cvID)
}

// GetSkillsByVacID mocks base method.
func (m *MockISkillRepository) GetSkillsByVacID(ctx context.Context, vacID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillsByVacID", ctx, vacID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillsByVacID indicates an expected call of GetSkillsByVacID.
func (mr *MockISkillRepositoryMockRecorder) GetSkillsByVacID(ctx, vacID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillsByVacID", reflect.TypeOf((*MockISkillRepository)(nil).GetSkillsByVacID), ctx, vacID)
}

// UpdateSkillsByCvID mocks base method.
func (m *MockISkillRepository) UpdateSkillsByCvID(ctx context.Context, cvID int, skills []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkillsByCvID", ctx, cvID, skills)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSkillsByCvID indicates an expected call of UpdateSkillsByCvID.
func (mr *MockISkillRepositoryMockRecorder) UpdateSkillsByCvID(ctx, cvID, skills interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkillsByCvID", reflect.TypeOf((*MockISkillRepository)(nil).UpdateSkillsByCvID), ctx, cvID, skills)
}
