// Code generated by MockGen. DO NOT EDIT.
// Source: psql/psql_education_institutions.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	domain "HnH/internal/domain"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEducationInstitutionRepository is a mock of IEducationInstitutionRepository interface.
type MockIEducationInstitutionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEducationInstitutionRepositoryMockRecorder
}

// MockIEducationInstitutionRepositoryMockRecorder is the mock recorder for MockIEducationInstitutionRepository.
type MockIEducationInstitutionRepositoryMockRecorder struct {
	mock *MockIEducationInstitutionRepository
}

// NewMockIEducationInstitutionRepository creates a new mock instance.
func NewMockIEducationInstitutionRepository(ctrl *gomock.Controller) *MockIEducationInstitutionRepository {
	mock := &MockIEducationInstitutionRepository{ctrl: ctrl}
	mock.recorder = &MockIEducationInstitutionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEducationInstitutionRepository) EXPECT() *MockIEducationInstitutionRepositoryMockRecorder {
	return m.recorder
}

// AddTxInstitutions mocks base method.
func (m *MockIEducationInstitutionRepository) AddTxInstitutions(ctx context.Context, tx *sql.Tx, cvID int, institutions []domain.DbEducationInstitution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTxInstitutions", ctx, tx, cvID, institutions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTxInstitutions indicates an expected call of AddTxInstitutions.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) AddTxInstitutions(ctx, tx, cvID, institutions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxInstitutions", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).AddTxInstitutions), ctx, tx, cvID, institutions)
}

// DeleteTxInstitutions mocks base method.
func (m *MockIEducationInstitutionRepository) DeleteTxInstitutions(ctx context.Context, tx *sql.Tx, cvID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTxInstitutions", ctx, tx, cvID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTxInstitutions indicates an expected call of DeleteTxInstitutions.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) DeleteTxInstitutions(ctx, tx, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTxInstitutions", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).DeleteTxInstitutions), ctx, tx, cvID)
}

// DeleteTxInstitutionsByIDs mocks base method.
func (m *MockIEducationInstitutionRepository) DeleteTxInstitutionsByIDs(ctx context.Context, tx *sql.Tx, instIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTxInstitutionsByIDs", ctx, tx, instIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTxInstitutionsByIDs indicates an expected call of DeleteTxInstitutionsByIDs.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) DeleteTxInstitutionsByIDs(ctx, tx, instIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTxInstitutionsByIDs", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).DeleteTxInstitutionsByIDs), ctx, tx, instIDs)
}

// GetCVInstitutionsIDs mocks base method.
func (m *MockIEducationInstitutionRepository) GetCVInstitutionsIDs(ctx context.Context, cvID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCVInstitutionsIDs", ctx, cvID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCVInstitutionsIDs indicates an expected call of GetCVInstitutionsIDs.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) GetCVInstitutionsIDs(ctx, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCVInstitutionsIDs", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).GetCVInstitutionsIDs), ctx, cvID)
}

// GetTxInstitutions mocks base method.
func (m *MockIEducationInstitutionRepository) GetTxInstitutions(ctx context.Context, tx *sql.Tx, cvID int) ([]domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxInstitutions", ctx, tx, cvID)
	ret0, _ := ret[0].([]domain.DbEducationInstitution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxInstitutions indicates an expected call of GetTxInstitutions.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) GetTxInstitutions(ctx, tx, cvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxInstitutions", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).GetTxInstitutions), ctx, tx, cvID)
}

// GetTxInstitutionsByIds mocks base method.
func (m *MockIEducationInstitutionRepository) GetTxInstitutionsByIds(ctx context.Context, tx *sql.Tx, cvIDs []int) ([]domain.DbEducationInstitution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxInstitutionsByIds", ctx, tx, cvIDs)
	ret0, _ := ret[0].([]domain.DbEducationInstitution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxInstitutionsByIds indicates an expected call of GetTxInstitutionsByIds.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) GetTxInstitutionsByIds(ctx, tx, cvIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxInstitutionsByIds", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).GetTxInstitutionsByIds), ctx, tx, cvIDs)
}

// UpdateTxInstitutions mocks base method.
func (m *MockIEducationInstitutionRepository) UpdateTxInstitutions(ctx context.Context, tx *sql.Tx, cvID int, institutions []domain.DbEducationInstitution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTxInstitutions", ctx, tx, cvID, institutions)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTxInstitutions indicates an expected call of UpdateTxInstitutions.
func (mr *MockIEducationInstitutionRepositoryMockRecorder) UpdateTxInstitutions(ctx, tx, cvID, institutions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTxInstitutions", reflect.TypeOf((*MockIEducationInstitutionRepository)(nil).UpdateTxInstitutions), ctx, tx, cvID, institutions)
}
