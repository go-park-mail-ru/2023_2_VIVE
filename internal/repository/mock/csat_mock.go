// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/csat.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	csatPB "HnH/services/csat/csatPB"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICsatRepository is a mock of ICsatRepository interface.
type MockICsatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICsatRepositoryMockRecorder
}

// MockICsatRepositoryMockRecorder is the mock recorder for MockICsatRepository.
type MockICsatRepositoryMockRecorder struct {
	mock *MockICsatRepository
}

// NewMockICsatRepository creates a new mock instance.
func NewMockICsatRepository(ctrl *gomock.Controller) *MockICsatRepository {
	mock := &MockICsatRepository{ctrl: ctrl}
	mock.recorder = &MockICsatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICsatRepository) EXPECT() *MockICsatRepositoryMockRecorder {
	return m.recorder
}

// GetQuestions mocks base method.
func (m *MockICsatRepository) GetQuestions(ctx context.Context, userID int) (*csatPB.QuestionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", ctx, userID)
	ret0, _ := ret[0].(*csatPB.QuestionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockICsatRepositoryMockRecorder) GetQuestions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockICsatRepository)(nil).GetQuestions), ctx, userID)
}

// GetStatistic mocks base method.
func (m *MockICsatRepository) GetStatistic(ctx context.Context) (*csatPB.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic", ctx)
	ret0, _ := ret[0].(*csatPB.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockICsatRepositoryMockRecorder) GetStatistic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockICsatRepository)(nil).GetStatistic), ctx)
}

// RegisterAnswer mocks base method.
func (m *MockICsatRepository) RegisterAnswer(ctx context.Context, answer *csatPB.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAnswer", ctx, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAnswer indicates an expected call of RegisterAnswer.
func (mr *MockICsatRepositoryMockRecorder) RegisterAnswer(ctx, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAnswer", reflect.TypeOf((*MockICsatRepository)(nil).RegisterAnswer), ctx, answer)
}
