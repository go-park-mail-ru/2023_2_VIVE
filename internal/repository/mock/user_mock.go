// Code generated by MockGen. DO NOT EDIT.
// Source: psql/psql_user.go

// Package psqlmock is a generated GoMock package.
package psqlmock

import (
	domain "HnH/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockIUserRepository) AddUser(ctx context.Context, user *domain.ApiUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIUserRepositoryMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIUserRepository)(nil).AddUser), ctx, user)
}

// CheckPasswordById mocks base method.
func (m *MockIUserRepository) CheckPasswordById(ctx context.Context, id int, passwordToCheck string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordById", ctx, id, passwordToCheck)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPasswordById indicates an expected call of CheckPasswordById.
func (mr *MockIUserRepositoryMockRecorder) CheckPasswordById(ctx, id, passwordToCheck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordById", reflect.TypeOf((*MockIUserRepository)(nil).CheckPasswordById), ctx, id, passwordToCheck)
}

// CheckUser mocks base method.
func (m *MockIUserRepository) CheckUser(ctx context.Context, user *domain.DbUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockIUserRepositoryMockRecorder) CheckUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockIUserRepository)(nil).CheckUser), ctx, user)
}

// GetAvatarByUserID mocks base method.
func (m *MockIUserRepository) GetAvatarByUserID(ctx context.Context, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarByUserID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarByUserID indicates an expected call of GetAvatarByUserID.
func (mr *MockIUserRepositoryMockRecorder) GetAvatarByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarByUserID", reflect.TypeOf((*MockIUserRepository)(nil).GetAvatarByUserID), ctx, userID)
}

// GetAvatarPathesByCVIDList mocks base method.
func (m *MockIUserRepository) GetAvatarPathesByCVIDList(ctx context.Context, cvIDs ...int) (map[int]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range cvIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvatarPathesByCVIDList", varargs...)
	ret0, _ := ret[0].(map[int]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarPathesByCVIDList indicates an expected call of GetAvatarPathesByCVIDList.
func (mr *MockIUserRepositoryMockRecorder) GetAvatarPathesByCVIDList(ctx interface{}, cvIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, cvIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarPathesByCVIDList", reflect.TypeOf((*MockIUserRepository)(nil).GetAvatarPathesByCVIDList), varargs...)
}

// GetLogoPathesByVacancyIDList mocks base method.
func (m *MockIUserRepository) GetLogoPathesByVacancyIDList(ctx context.Context, vacIDs ...int) (map[int]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range vacIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogoPathesByVacancyIDList", varargs...)
	ret0, _ := ret[0].(map[int]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogoPathesByVacancyIDList indicates an expected call of GetLogoPathesByVacancyIDList.
func (mr *MockIUserRepositoryMockRecorder) GetLogoPathesByVacancyIDList(ctx interface{}, vacIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, vacIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogoPathesByVacancyIDList", reflect.TypeOf((*MockIUserRepository)(nil).GetLogoPathesByVacancyIDList), varargs...)
}

// GetRoleById mocks base method.
func (m *MockIUserRepository) GetRoleById(ctx context.Context, userID int) (domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", ctx, userID)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockIUserRepositoryMockRecorder) GetRoleById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockIUserRepository)(nil).GetRoleById), ctx, userID)
}

// GetUserEmpId mocks base method.
func (m *MockIUserRepository) GetUserEmpId(ctx context.Context, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmpId", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmpId indicates an expected call of GetUserEmpId.
func (mr *MockIUserRepositoryMockRecorder) GetUserEmpId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmpId", reflect.TypeOf((*MockIUserRepository)(nil).GetUserEmpId), ctx, userID)
}

// GetUserIDByVacID mocks base method.
func (m *MockIUserRepository) GetUserIDByVacID(ctx context.Context, vacancyID int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByVacID", ctx, vacancyID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByVacID indicates an expected call of GetUserIDByVacID.
func (mr *MockIUserRepositoryMockRecorder) GetUserIDByVacID(ctx, vacancyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByVacID", reflect.TypeOf((*MockIUserRepository)(nil).GetUserIDByVacID), ctx, vacancyID)
}

// GetUserIdByEmail mocks base method.
func (m *MockIUserRepository) GetUserIdByEmail(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByEmail", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByEmail indicates an expected call of GetUserIdByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserIdByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserIdByEmail), ctx, email)
}

// GetUserInfo mocks base method.
func (m *MockIUserRepository) GetUserInfo(ctx context.Context, userID int) (*domain.DbUser, *int, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID)
	ret0, _ := ret[0].(*domain.DbUser)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(*int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockIUserRepositoryMockRecorder) GetUserInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockIUserRepository)(nil).GetUserInfo), ctx, userID)
}

// UpdateUserInfo mocks base method.
func (m *MockIUserRepository) UpdateUserInfo(ctx context.Context, userID int, user *domain.UserUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserInfo(ctx, userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserInfo), ctx, userID, user)
}

// UploadAvatarByUserID mocks base method.
func (m *MockIUserRepository) UploadAvatarByUserID(ctx context.Context, userID int, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatarByUserID", ctx, userID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatarByUserID indicates an expected call of UploadAvatarByUserID.
func (mr *MockIUserRepositoryMockRecorder) UploadAvatarByUserID(ctx, userID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatarByUserID", reflect.TypeOf((*MockIUserRepository)(nil).UploadAvatarByUserID), ctx, userID, path)
}
